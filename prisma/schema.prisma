// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  // output   = "../@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Roles {
  ADMIN
  USER
}

enum ProductTag {
  NEW
  SUPER_SAVER
  LIMITED
  TRENDING
}

enum OrderStatus {
  PLACED
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum PaymentMode {
  COD
  UPI
  NET_BANKING
  // CARD,
}

enum PaymentStatus {
  NOT_INITIATED
  PENDING
  PROCESSING
  AUTHORIZED
  PAID
  FAILED
  CANCELLED
  REFUNDED
  // PARTIALLY_REFUNDED
  // DISPUTED
  // EXPIRED
  // ON_HOLD
  // AWAITING_PAYMENT
  // SETTLED
}

enum DeliveryStatus {
  NOT_DISPATCHED // Order placed, but not handed over to courier
  DISPATCHED // Handed over to courier
  IN_TRANSIT // On the way to delivery address
  OUT_FOR_DELIVERY // With delivery agent, out for final delivery
  DELIVERED // Successfully delivered to customer
  FAILED // Delivery attempt failed
  RETURNED // Returned to sender
  CANCELLED // Delivery cancelled
  LOST // Lost in transit
  DELAYED
}

model User {
  id                        Int     @id @default(autoincrement())
  email                     String  @unique()
  name                      String
  password_hash             String
  email_verified            Boolean @default(false)
  refresh_hash              String  @default("")
  reset_password_token      String? @unique
  reset_password_expiration String?

  role    Roles     @default(USER)
  cart    Cart[]
  order   Order[]
  address Address[]

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("users")
}

model Product {
  id        Int         @id @default(autoincrement())
  name      String
  image_url String?
  tag       ProductTag?
  variants  Variant[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("products")
}

model Variant {
  id           Int         @id @default(autoincrement())
  size         Float
  unit         String
  actual_price Float
  price        Float
  discount     Float
  product      Product     @relation(fields: [productId], references: [id])
  productId    Int
  stock        Int
  deleted      Boolean     @default(false)
  cart         Cart[]
  variant      OrderItem[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("variants")
}

model Cart {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    Int
  variant    Variant @relation(fields: [variant_id], references: [id])
  variant_id Int
  quantity   Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@unique([user_id, variant_id])
}

model Order {
  id                 Int             @id @default(autoincrement())
  user               User            @relation(fields: [user_id], references: [id])
  user_id            Int
  order_items        OrderItem[]
  status             OrderStatus     @default(PLACED)
  address            Address         @relation(fields: [address_id], references: [id])
  address_id         Int
  payment_mode       PaymentMode     @default(COD)
  payment_status     PaymentStatus   @default(NOT_INITIATED)
  order_tracking     OrderTracking?
  total_price        Int             @default(0)
  total_actual_price Int             @default(0)
  payment_details    PaymentDetails?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("orders")
}

model OrderItem {
  id                   Int     @id @default(autoincrement())
  order                Order   @relation(fields: [order_id], references: [id])
  order_id             Int
  ordered_price        Float
  ordered_actual_price Float
  quantity             Int
  discount             Float
  variant              Variant @relation(fields: [variant_id], references: [id])
  variant_id           Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("order_items")
}

model Address {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [user_id], references: [id])
  user_id         Int
  name            String
  phone           String
  alternate_phone String?
  street          String
  city            String
  state           String
  pincode         String
  type            AddressType
  order           Order[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("addresses")
}

model OrderTracking {
  id      Int   @id @default(autoincrement())
  orderId Int   @unique()
  order   Order @relation(fields: [orderId], references: [id])

  deliveryDate   DateTime?
  deliveredAt    DateTime?
  shippedAt      DateTime?
  estimatedDays  Int?
  trackingNumber String?
  courierName    String?
  notes          String?
  location       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_tracking")
}

model PaymentDetails {
  id               Int    @id @default(autoincrement())
  amount           Int
  amount_due       Int
  amount_paid      Int
  attempts         Int
  currency         String
  entity           String
  payment_order_id String
  receipt          String
  order_id         Int    @unique()
  order            Order  @relation(fields: [order_id], references: [id])
  status           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_details")
}
